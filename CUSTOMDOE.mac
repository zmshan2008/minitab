gmacro

###########################################################################
#
#     Name:  CustomDOE.MAC
#  Version:  2.0
#  Authors:  Doug Gorman and Jim Colton
#
#  This macro selects a D-optimal design from either a 2-level factorial
#  design or a central composite design as the base design.  This 
#  D-optimal design will be able to estimate all main effects, all two-way 
#  interactions  and, if a central composite base design is specified by 
#  the user, all quadratics.
#   
#  Before running the macro, create the three required input columns: C1, 
#  C2 and C3.  C1 must contain the factor names.  You can have 2 to 11 
#  factors for a factorial design, or 2 to 9 factors for a central 
#  composite.  C2 must contain the low levels for each factor. C3 must 
#  contain the high levels for each factor.
#
#  The information in the worksheet will look something like the following.
#
#      C1        C2   C3
#  Temperature  350  450
#  Thickness      6   10 
#  Time          12   18
#  CutSpeed      45   55
#
#  Both C2 and C3 must be numeric columns. For a factorial design with 
#  text factors use the coded levels -1 for low and +1 for high.
#
#  For a central composite design, the low and high levels are for the 
#  cube points and the factors are assumed to be continuous.
#  
#  You must enable command language in the Session window prior to running 
#  the macro.  To enable command language, click anywhere in the Session 
#  window to make it the active window.  Go to the top menu bar, click 
#  Editor > Enable Commands.  The "MTB>" prompt should now appear on the 
#  last line of your Session window.  
#  
#  Once you have entered the required information into C1, C2, and C3, you 
#  can run the macro.  At the MTB> prompt in the Session window, type 
#
#    %customdoe
#
#  The macro will prompt you to select either a 2-level factorial base 
#  design (enter 1) or a central composite base design (enter 2). Next, 
#  the macro will prompt you to enter a number of runs.
#
#  The D-optimal design is stored in the same worksheet as the factor name 
#  and level columns starting in columns C4 and beyond.  Any data stored 
#  in these columns before the macro is run may be lost.
#
#  If a 2-level factorial base design is selected, when analyzing the  
#  experiment in Stat > DOE > Factorial > Analyze Factorial Design, click 
#  on the Terms list and select "Include terms up through order 2".
#
#  If you expect to run this macro frequently, you may want to add it to 
#  the Tools menu.  Go to Tools > Customize and select the Tools tab. 
#  Click on the new folder button (next to the red X). Type in a name for 
#  your macro. Next, click on the button with 3 dots and browse for the 
#  macro. Click close and you can now run the macro by selecting it from 
#  the Tools menu in Minitab.
#
#  The Initial D-Optimal design is generated by Sequential Optimization.  
#  The Exchange method with 1 exchange point is utilized for Improving the 
#  Initial Design.  
#  
###########################################################################
#
#  Neither Minitab, Inc. nor the author(s) of this MACRO makes any claim 
#  of or offers any Warranty whatsoever with regard to the accuracy of 
#  this MACRO or its suitability for use.  Minitab, Inc. and the author(s)
#  of this MACRO each hereby disclaims any Warranty and/or liability with 
#  respect thereto. 
#
###########################################################################
customdoe
mreset
noecho
let k4 = count(c1)

if k4 < 2
   Note
   Note Error:  There must be at least 2 factors in C1.
   Note
   Note Macro Exiting.
   Note
   Exit
endif

if k4 > 11
   Note
   Note Error:  There are too many factors in C1
   Note          - A Factorial Design may have 2-11 factors
   Note          - A Central Composite Design may have 2-9 factors
   Note 
   Note Macro Exiting.
   Note
   Exit
endif


if (count(c1)<>count(c2)) or (count(c1)<>count(c3)) or (count(c2)<>count(c3))
   Note
   Note Error:   Factor and level columns (C1, C2 & C3) must be the same length
   Note
   Note Macro Exiting.
   Note
   erase k4
   Exit
endif


Mlabel 1
Note
Note User Input:    To create an Optimal Factorial Design enter 1
Note                To create an Optimal Response Surface Design enter 2
Note

Set c400;
	file "terminal";
	format (f1);
	nobs 1.
copy c400 k400

if (k400 = 1) 
    if (k4<=11) and (k4>1)
      Call odfact
    else 
      Note Column C1 contains too many factors.
      Note Factorial designs must have between 2 and 11 factors. Macro Exiting.
      Note
    Endif

elseif (k400 = 2) 
     if (k4<=9) and (k4>1)
       call rsm
     else
       Note 
       Note Column C1 contains too many factors.
       Note Response surface designs must have between 2 and 9 factors. Macro Exiting.
       Note
     endif
else 
    Note
    Note * Invalid entry for design type *
    Goto 1
    Note
endif


erase k1-k505 c400
endmacro

####################################################################################################################
#
#    FACTORIAL CODE
#
####################################################################################################################


GMACRO
odfact

Let K1 = Count(C1)
Let K2 = K1 + Comb(K1,2)+1
Let k3 = 2**k1


# This section of code determines the minimum number of runs in the optimal design
# based on a main effects and 2-way interaction model and prompts the user for 
# the desired number of runs at the keyboard



# Create a text version of the minimum number of runs for prompting
copy k2 c500
text c500 c500
copy c500 k500
let k501 = concatenate("Enter desired number of runs, must be >= ", k500)
name k501 "User Input:" 
#
Let k502 = "Design with minimum number of runs has 0 df for error."
name K502 "Note:"

mlabel 2

notitle
Print k501 k502
title

Set c505;
	file "terminal";
	nobs 1.
copy c505 k505
erase c500 c505
name k505 "Runs"
if Runs < k2
        Note
        note * Number of runs less than required minimum, try again *
        goto 2
	exit
endif

########################################################

If K1=2
Copy C2 K11 - K12
Copy C3 K21 - K22
Copy C1 K31 - K32
Name C4 "StdOrder" C5 "RunOrder" C6 "CenterPt" C7 "Blocks" 
Name C8 K31 C9 K32

FFDesign k1 k3;
  CTPT 'CenterPt';
  Blocks 1;
  Randomize;
  brief 0;
  SOrder 'StdOrder' 'RunOrder';
  XMatrix 'blocks' c8-c9;
  Levels K11 K21 K12 K22.

OptDesign Runs;
   facmodel C8 C9 C8*C9;
   Exchange 1;
   Sequential;
   XMatrix C8-C9;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'CenterPt' ) ('StdOrder' 'RunOrder' 'Blocks' 'CenterPt' );
  Brief 0.

Cffd c8-c9;
  Sorder c4;
  Rorder c5;
  Ctpt c6;
  Blocks c7;
  Inunit 1.

EndIf
################################################################################################

If K1=3
Copy C2 K11 - K13
Copy C3 K21 - K23
Copy C1 K31 - K33
Name C4 "StdOrder" C5 "RunOrder" C6 "centerpt" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33

FFDesign k1 k3;
  CTPT 'CenterPt';
  Blocks 1;
  Randomize;
  brief 0;
  SOrder 'StdOrder' 'RunOrder';
  xmatrix 'blocks' c8-c10;
  Levels K11 K21 K12 K22 K13 K23.

OptDesign Runs;
   facmodel C8 C9 C10 C8*C9 C8*C10 C9*C10;
   Exchange 1;
   Sequential;
   XMatrix C8-C10;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' ) ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' );
  Brief 0.


CFFD C8-C10;
  SOrder C4;
  ROrder C5;
  ctpt C6;
  Blocks C7;
  Inunit 1.

EndIf

################################################################################################

If K1=4
Copy C2 K11 - K14
Copy C3 K21 - K24
Copy C1 K31 - K34
Name C4 "StdOrder" C5 "RunOrder" C6 "centerpt" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34

FFDesign k1 k3;
  CTPT 'CenterPt';
  Blocks 1;
  Randomize;
  brief 0;
  SOrder 'StdOrder' 'RunOrder';
  XMatrix 'Blocks' C8-C11;
  Levels K11 K21 K12 K22 K13 K23 K14 K24.

OptDesign Runs;
   facmodel C8 C9 C10 C11 C8*C9 C8*C10 C8*C11 C9*C10 C9*C11 C10*C11;
   Exchange 1;
   Sequential;
   XMatrix C8-C11;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' ) ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' );
   Brief 0.

CFFD C8-C11;
  SOrder C4;
  ROrder C5;
  ctpt c6;
  Blocks C7;
  Inunit 1.

EndIf

################################################################################################

If K1=5
Copy C2 K11 - K15
Copy C3 K21 - K25
Copy C1 K31 - K35
Name C4 "StdOrder" C5 "RunOrder" C6 "centerpt" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34 C12 K35
FFDesign k1 k3;
  CTPT 'CenterPt';
  Blocks 1;
  Randomize;
  brief 0;
  SOrder 'StdOrder' 'RunOrder';
  XMatrix 'Blocks' C8-C12;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25.

OptDesign Runs;
   facmodel C8 C9 C10 C11 C12 &
   C8*C9 C8*C10 C8*C11 C8*C12 C9*C10 C9*C11 C9*C12 C10*C11 C10*C12 C11*C12;
   Exchange 1;
   Sequential;
   XMatrix C8-C12;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' ) ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' );
   Brief 0.

CFFD C8-C12;
  SOrder C4;
  ROrder C5;
  ctpt c6;
  Blocks C7;
  Inunit 1.

EndIf

################################################################################################

If K1=6
Copy C2 K11 - K16
Copy C3 K21 - K26
Copy C1 K31 - K36
Name C4 "StdOrder" C5 "RunOrder" C6 "centerpt" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34 C12 K35 C13 K36
FFDesign k1 k3;
  CTPT 'CenterPt';
  Blocks 1;
  Randomize;
  brief 0;
  SOrder 'StdOrder' 'RunOrder';
  XMatrix 'Blocks' C8-C13;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26.

OptDesign Runs;
  facmodel C8 C9 C10 C11 C12 C13 &
   C8*C9 C8*C10 C8*C11 C8*C12 C8*C13 C9*C10 C9*C11 C9*C12 C9*C13 C10*C11 C10*C12 C10*C13 C11*C12 C11*C13 C12*C13;
   Exchange 1;
   Sequential;
   XMatrix C8-C13;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' ) ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' );
  Brief 0.

CFFD C8-C13;
  SOrder C4;
  ROrder C5;
  ctpt c6;
  Blocks C7;
  Inunit 1.

EndIf

################################################################################################

If K1=7
Copy C2 K11 - K17
Copy C3 K21 - K27
Copy C1 K31 - K37
Name C4 "StdOrder" C5 "RunOrder" C6 "centerpt" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34 C12 K35 C13 K36 C14 k37

FFDesign k1 k3;
  CTPT 'CenterPt';
  Blocks 1;
  Randomize;
  brief 0;
  SOrder 'StdOrder' 'RunOrder';
  XMatrix 'Blocks' C8-C14;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27.

OptDesign Runs;
  facmodel C8 C9 C10 C11 C12 C13 C14 &
   C8*C9 C8*C10 C8*C11 C8*C12 C8*C13 C9*C10 C9*C11 C9*C12 C9*C13 C10*C11 C10*C12 C10*C13 C11*C12 C11*C13 C12*C13&
   C8*C14 C9*C14 C10*C14 C11*C14 C12*C14 C13*C14;
   Exchange 1;
   Sequential;
   XMatrix C8-C14;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' ) ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' );
   Brief 0.

CFFD C8-C14;
  SOrder C4;
  ROrder C5;
  ctpt c6;
  Blocks C7;
  Inunit 1.

EndIf

################################################################################################

If K1=8
Copy C2 K11 - K18
Copy C3 K21 - K28
Copy C1 K31 - K38
Name C4 "StdOrder" C5 "RunOrder" C6 "centerpt" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34 C12 K35 C13 K36 C14 k37 C15 K38
FFDesign k1 128;
  CTPT 'CenterPt';
  Blocks 1;
  Randomize;
  brief 0;
  SOrder 'StdOrder' 'RunOrder';
  XMatrix 'Blocks' C8-C15;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27 K18 K28.

OptDesign Runs;
  facmodel C8 C9 C10 C11 C12 C13 C14 C15 &
   C8*C9 C8*C10 C8*C11 C8*C12 C8*C13 C9*C10 C9*C11 C9*C12 C9*C13 C10*C11 C10*C12 C10*C13 C11*C12 C11*C13 C12*C13&
   C8*C14 C9*C14 C10*C14 C11*C14 C12*C14 C13*C14 C8*c15 C9*C15 C10*C15 C11*C15 C12*c15 C13*c15 C14*C15;
   Exchange 1;
   Sequential;
   XMatrix C8-C15;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' ) ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' );
   Brief 0.

CFFD C8-C15;
  SOrder C4;
  ROrder C5;
  ctpt c6;
  Blocks C7;
  Inunit 1.

EndIf

################################################################################################

If K1=9
Copy C2 K11 - K19
Copy C3 K21 - K29
Copy C1 K31 - K39
Name C4 "StdOrder" C5 "RunOrder" C6 "centerpt" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34 C12 K35 C13 K36 C14 k37 C15 K38 C16 K39

FFDesign k1 128;
  CTPT 'CenterPt';
  Blocks 1;
  Randomize;
  brief 0;
  SOrder 'StdOrder' 'RunOrder';
  XMatrix 'Blocks' C8-C16;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27 K18 K28 K19 K29.

OptDesign Runs;
  facmodel C8 C9 C10 C11 C12 C13 C14 C15 C16 &
   C8*C9 C8*C10 C8*C11 C8*C12 C8*C13 C9*C10 C9*C11 C9*C12 C9*C13 C10*C11 C10*C12 C10*C13 C11*C12 C11*C13 C12*C13&
   C8*C14 C9*C14 C10*C14 C11*C14 C12*C14 C13*C14 C8*c15 C9*C15 C10*C15 C11*C15 C12*c15 C13*c15 C14*C15&
   c8*c16 C9*C16 C10*C16 C11*C16 C12*C16 C13*C16 C14*C16 C15*C16;
   Exchange 1;
   Sequential;
   XMatrix C8-C16;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' ) ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' );
   Brief 0.

CFFD C8-C16;
  SOrder C4;
  ROrder C5;
  ctpt c6;
  Blocks C7;
  Inunit 1.

EndIf

################################################################################################

If K1=10
Copy C2 K11 - K20
Copy C3 K21 - K30
Copy C1 K31 - K40
Name C4 "StdOrder" C5 "RunOrder" C6 "centerpt" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34 C12 K35 C13 K36 C14 k37 C15 K38 C16 K39 C17 K40

FFDesign k1 128;
  CTPT 'CenterPt';
  Blocks 1;
  Randomize;
  brief 0;
  SOrder 'StdOrder' 'RunOrder';
  XMatrix 'Blocks' C8-C17;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27 K18 K28 K19 K29 K20 K30.

OptDesign Runs;
  facmodel C8 C9 C10 C11 C12 C13 C14 C15 C16 C17 &
   C8*C9 C8*C10 C8*C11 C8*C12 C8*C13 C9*C10 C9*C11 C9*C12 C9*C13 C10*C11 C10*C12 C10*C13 C11*C12 C11*C13 C12*C13&
   C8*C14 C9*C14 C10*C14 C11*C14 C12*C14 C13*C14 C8*c15 C9*C15 C10*C15 C11*C15 C12*c15 C13*c15 C14*C15&
   c8*c16 C9*C16 C10*C16 C11*C16 C12*C16 C13*C16 C14*C16 C15*C16 C8*C17 C9*C17 C10*C17 C11*C17 C12*C17 C13*C17 C14*C17 C15*C17 C16*C17;
   Exchange 1;
   Sequential;
   XMatrix C8-C17;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' ) ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' );
   Brief 0.

CFFD C8-C17;
  SOrder C4;
  ROrder C5;
  ctpt c6;
  Blocks C7;
  Inunit 1.

EndIf

####################################################################################################################

If K1=11
Copy C2 K51 - K61
Copy C3 K71 - K81
Copy C1 K91 - K101
Name C4 "StdOrder" C5 "RunOrder" C6 "centerpt" C7 "Blocks" 
Name C8 K91 C9 K92 C10 K93 C11 K94 C12 K95 C13 K96 C14 k97 C15 K98 C16 K99 C17 K100 c18 k101

FFDesign k1 128;
  CTPT 'CenterPt';
  Blocks 1;
  Randomize;
  brief 0;
  SOrder 'StdOrder' 'RunOrder';
  XMatrix 'Blocks' C8-C18;
  Levels K51 K71 K52 K72 K53 K73 K54 K74 K55 K75 K56 K76 K57 K77 K58 K78 K59 K79 K60 K80 k61 k81.

OptDesign Runs;
  facmodel C8 C9 C10 C11 C12 C13 C14 C15 C16 C17 C18&
   C8*C9 C8*C10 C8*C11 C8*C12 C8*C13 C9*C10 C9*C11 C9*C12 C9*C13 C10*C11 C10*C12 C10*C13 C11*C12 C11*C13 C12*C13&
   C8*C14 C9*C14 C10*C14 C11*C14 C12*C14 C13*C14 C8*c15 C9*C15 C10*C15 C11*C15 C12*c15 C13*c15 C14*C15&
   c8*c16 C9*C16 C10*C16 C11*C16 C12*C16 C13*C16 C14*C16 C15*C16 C8*C17 C9*C17 C10*C17 C11*C17 C12*C17 C13*C17 C14*C17 C15*C17 C16*C17&
   C8*C18 C9*C18 C10*C18 C11*C18 C12*C18 C13*C18 C14*C18 C15*C18 C16*C18 C17*C18;
   Exchange 1;
   Sequential;
   XMatrix C8-C18;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' ) ('StdOrder' 'RunOrder' 'Blocks' 'centerpt' );
  Brief 0.

CFFD C8-C18;
  SOrder C4;
  ROrder C5;
  ctpt c6;
  Blocks C7;
  Inunit 1.

EndIf

# The following assigns proper runorder values and randomizes

Set 'RunOrder'
  1( 1 : 'runs' / 1 )1
  End.

Sample runs 'RunOrder' 'RunOrder'.

let k5 = 7 + k1
Sort 'StdOrder'-ck5 'StdOrder'-ck5;
  By 'RunOrder'.

ENDMACRO

####################################################################################################################
#
#    RESPONSE SURFACE CODE
#
####################################################################################################################


GMACRO
RSM

Let K1 = Count(C1)
Let K2 = 2*K1 + Comb(K1,2)+1

# This section of code determines the minimum number of runs in the optimal design
# based on a main effects, 2-way interaction and quadratic model and prompts the user for 
# the desired number of runs at the keyboard

# Create a text version of the minimum number of runs for prompting
copy k2 c500
text c500 c500
copy c500 k500
let k501 = concatenate("Enter desired number of runs, must be >= ", k500)
name k501 "User Input:" 

Let k502 = "Design with minimum number of runs has 0 df for error."
name K502 "Note:"

mlabel 3

notitle
Print k501 k502
title

Set c505;
	file "terminal";
	nobs 1.
copy c505 k505
erase c500 c505
name k505 "Runs"
if Runs < k2
	Note
        note  * Number of runs less than required minimum, try again. *
        Goto 3
	exit
endif

########################################################

If K1=2
Copy C2 K11 - K12
Copy C3 K21 - K22
Copy C1 K31 - K32
Name C4 "StdOrder" C5 "RunOrder" C6 "PtType" C7 "Blocks" 
Name C8 K31 C9 K32

CCDesign K1;
  Center 5;
  Randomize;
  SOrder 'StdOrder' 'RunOrder';
  PtType 'PtType';
  Brief 0;
  XMatrix 'Blocks' C8-C9;
  Levels K11 K21 K12 K22.
CRSD C8-C9;
  SOrder C4;
  ROrder C5;
  PtType C6;
  Blocks C7;
  Levels K11 K21 K12 K22.
OptDesign Runs;
   ResModel C8 C9 C8*C8 C9*C9 C8*C9;
      Levels K11 K21 K12 K22;
      inunits 1;
   Exchange 1;
   Sequential;
   XMatrix C8-C9;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'PtType' ) ('StdOrder' 'RunOrder' 'Blocks' 'PtType' );
   Brief 0.

EndIf

################################################################################################

If K1=3
Copy C2 K11 - K13
Copy C3 K21 - K23
Copy C1 K31 - K33
Name C4 "StdOrder" C5 "RunOrder" C6 "PtType" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33
CCDesign K1;
  Center 6;
  Randomize;
  SOrder 'StdOrder' 'RunOrder';
  PtType 'PtType';
  Brief 0;
  XMatrix 'Blocks' C8-C10;
  Levels K11 K21 K12 K22 K13 K23.
CRSD C8-C10;
  SOrder C4;
  ROrder C5;
  PtType C6;
  Blocks C7;
  Levels K11 K21 K12 K22 K13 K23.
OptDesign Runs;
   ResModel C8 C9 C10 C8*C8 C9*C9 C10*C10 C8*C9 C8*C10 C9*C10;
      Levels K11 K21 K12 K22 K13 K23;
      inunits 1;
   Exchange 1;
   Sequential;
   XMatrix C8-C10;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'PtType' ) ('StdOrder' 'RunOrder' 'Blocks' 'PtType' );
   Brief 0.

EndIf

################################################################################################

If K1=4
Copy C2 K11 - K14
Copy C3 K21 - K24
Copy C1 K31 - K34
Name C4 "StdOrder" C5 "RunOrder" C6 "PtType" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34
CCDesign K1;
  Center 7;
  Randomize;
  SOrder 'StdOrder' 'RunOrder';
  PtType 'PtType';
  Brief 0;
  XMatrix 'Blocks' C8-C11;
  Levels K11 K21 K12 K22 K13 K23 K14 K24.
CRSD C8-C11;
  SOrder C4;
  ROrder C5;
  PtType C6;
  Blocks C7;
  Levels K11 K21 K12 K22 K13 K23 K14 K24.
OptDesign Runs;
   ResModel C8 C9 C10 C11 C8*C8 C9*C9 C10*C10 C11*C11 C8*C9 C8*C10 C8*C11 C9*C10 C9*C11 C10*C11;
     Levels K11 K21 K12 K22 K13 K23 K14 K24;
     inunit 1;
   Exchange 1;
   Sequential;
   XMatrix C8-C11;
    Carry ('StdOrder' 'RunOrder' 'Blocks' 'PtType' ) ('StdOrder' 'RunOrder' 'Blocks' 'PtType' );
  Brief 0.

EndIf

################################################################################################

If K1=5
Copy C2 K11 - K15
Copy C3 K21 - K25
Copy C1 K31 - K35
Name C4 "StdOrder" C5 "RunOrder" C6 "PtType" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34 C12 K35
CCDesign K1;
  Center 10;
  Randomize;
  SOrder 'StdOrder' 'RunOrder';
  PtType 'PtType';
  Brief 0;
  XMatrix 'Blocks' C8-C12;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25.
CRSD C8-C12;
  SOrder C4;
  ROrder C5;
  PtType C6;
  Blocks C7;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25.
OptDesign Runs;
   ResModel C8 C9 C10 C11 C12 C8*C8 C9*C9 C10*C10 C11*C11 C12*C12&
   C8*C9 C8*C10 C8*C11 C8*C12 C9*C10 C9*C11 C9*C12 C10*C11 C10*C12 C11*C12;
      Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25;
      inunit 1;
   Exchange 1;
   Sequential;
   XMatrix C8-C12;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'PtType' ) ('StdOrder' 'RunOrder' 'Blocks' 'PtType' );
   Brief 0.

EndIf

################################################################################################

If K1=6
Copy C2 K11 - K16
Copy C3 K21 - K26
Copy C1 K31 - K36
Name C4 "StdOrder" C5 "RunOrder" C6 "PtType" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34 C12 K35 C13 K36
CCDesign K1;
  Center 14;
  Randomize;
  SOrder 'StdOrder' 'RunOrder';
  PtType 'PtType';
  Brief 0;
  XMatrix 'Blocks' C8-C13;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26.
CRSD C8-C13;
  SOrder C4;
  ROrder C5;
  PtType C6;
  Blocks C7;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26.
OptDesign Runs;
  ResModel C8 C9 C10 C11 C12 C13 C8*C8 C9*C9 C10*C10 C11*C11 C12*C12 C13*C13&
   C8*C9 C8*C10 C8*C11 C8*C12 C8*C13 C9*C10 C9*C11 C9*C12 C9*C13 C10*C11 C10*C12 C10*C13 C11*C12 C11*C13 C12*C13;
      Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26;
      inunit 1;
   Exchange 1;
   Sequential;
   XMatrix C8-C13;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'PtType' ) ('StdOrder' 'RunOrder' 'Blocks' 'PtType' );
  Brief 0.

EndIf

################################################################################################

If K1=7
Copy C2 K11 - K17
Copy C3 K21 - K27
Copy C1 K31 - K37
Name C4 "StdOrder" C5 "RunOrder" C6 "PtType" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34 C12 K35 C13 K36 C14 k37
CCDesign K1;
  Center 10;
  Randomize;
  SOrder 'StdOrder' 'RunOrder';
  PtType 'PtType';
  Brief 0;
  XMatrix 'Blocks' C8-C14;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27.
CRSD C8-C14;
  SOrder C4;
  ROrder C5;
  PtType C6;
  Blocks C7;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27.
OptDesign Runs;
  ResModel C8 C9 C10 C11 C12 C13 C14 C8*C8 C9*C9 C10*C10 C11*C11 C12*C12 C13*C13 C14*C14&
   C8*C9 C8*C10 C8*C11 C8*C12 C8*C13 C9*C10 C9*C11 C9*C12 C9*C13 C10*C11 C10*C12 C10*C13 C11*C12 C11*C13 C12*C13&
   C8*C14 C9*C14 C10*C14 C11*C14 C12*C14 C13*C14;
      Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27;
      Inunit 1; 
   Exchange 1;
   Sequential;
   XMatrix C8-C14;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'PtType' ) ('StdOrder' 'RunOrder' 'Blocks' 'PtType' );
  Brief 0.

EndIf

################################################################################################

If K1=8
Copy C2 K11 - K18
Copy C3 K21 - K28
Copy C1 K31 - K38
Name C4 "StdOrder" C5 "RunOrder" C6 "PtType" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34 C12 K35 C13 K36 C14 k37 C15 K38
CCDesign K1;
  Half;
  Center 10;
  Randomize;
  SOrder 'StdOrder' 'RunOrder';
  PtType 'PtType';
  Brief 0;
  XMatrix 'Blocks' C8-C15;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27 K18 K28.
CRSD C8-C15;
  SOrder C4;
  ROrder C5;
  PtType C6;
  Blocks C7;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27 K18 K28.
OptDesign Runs;
  ResModel C8 C9 C10 C11 C12 C13 C14 C15 C8*C8 C9*C9 C10*C10 C11*C11 C12*C12 C13*C13 C14*C14 C15*C15&
   C8*C9 C8*C10 C8*C11 C8*C12 C8*C13 C9*C10 C9*C11 C9*C12 C9*C13 C10*C11 C10*C12 C10*C13 C11*C12 C11*C13 C12*C13&
   C8*C14 C9*C14 C10*C14 C11*C14 C12*C14 C13*C14 C8*c15 C9*C15 C10*C15 C11*C15 C12*c15 C13*c15 C14*C15;
      Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27 K18 K28;
      inunits 1;
   Exchange 1;
   Sequential;
   XMatrix C8-C15;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'PtType' ) ('StdOrder' 'RunOrder' 'Blocks' 'PtType' );
  Brief 0.

EndIf

################################################################################################

If K1=9
Copy C2 K11 - K19
Copy C3 K21 - K29
Copy C1 K31 - K39
Name C4 "StdOrder" C5 "RunOrder" C6 "PtType" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34 C12 K35 C13 K36 C14 k37 C15 K38 C16 K39
CCDesign K1;
  Quarter;
  Center 10;
  Randomize;
  SOrder 'StdOrder' 'RunOrder';
  PtType 'PtType';
  Brief 0;
  XMatrix 'Blocks' C8-C16;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27 K18 K28 K19 K29.
CRSD C8-C16;
  SOrder C4;
  ROrder C5;
  PtType C6;
  Blocks C7;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27 K18 K28 K19 K29.
OptDesign Runs;
  ResModel C8 C9 C10 C11 C12 C13 C14 C15 C16 C8*C8 C9*C9 C10*C10 C11*C11 C12*C12 C13*C13 C14*C14 C15*C15 C16*C16&
   C8*C9 C8*C10 C8*C11 C8*C12 C8*C13 C9*C10 C9*C11 C9*C12 C9*C13 C10*C11 C10*C12 C10*C13 C11*C12 C11*C13 C12*C13&
   C8*C14 C9*C14 C10*C14 C11*C14 C12*C14 C13*C14 C8*c15 C9*C15 C10*C15 C11*C15 C12*c15 C13*c15 C14*C15&
   c8*c16 C9*C16 C10*C16 C11*C16 C12*C16 C13*C16 C14*C16 C15*C16;
      Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27 K18 K28 K19 K29;
      inunits 1;
   Exchange 1;
   Sequential;
   XMatrix C8-C16;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'PtType' ) ('StdOrder' 'RunOrder' 'Blocks' 'PtType' );
  Brief 0.

EndIf

################################################################################################

If K1=10
Copy C2 K11 - K20
Copy C3 K21 - K30
Copy C1 K31 - K40
Name C4 "StdOrder" C5 "RunOrder" C6 "PtType" C7 "Blocks" 
Name C8 K31 C9 K32 C10 K33 C11 K34 C12 K35 C13 K36 C14 k37 C15 K38 C16 K39 C17 K40
CCDesign K1;
  Eighth;
  Center 10;
  Randomize;
  SOrder 'StdOrder' 'RunOrder';
  PtType 'PtType';
  Brief 0;
  XMatrix 'Blocks' C8-C17;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27 K18 K28 K19 K29 K20 K30.
CRSD C8-C17;
  SOrder C4;
  ROrder C5;
  PtType C6;
  Blocks C7;
  Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27 K18 K28 K19 K29 K20 K30.
OptDesign Runs;
  ResModel C8 C9 C10 C11 C12 C13 C14 C15 C16 C17 C8*C8 C9*C9 C10*C10 C11*C11 C12*C12 C13*C13 C14*C14 C15*C15 C16*C16 C17*C17&
   C8*C9 C8*C10 C8*C11 C8*C12 C8*C13 C9*C10 C9*C11 C9*C12 C9*C13 C10*C11 C10*C12 C10*C13 C11*C12 C11*C13 C12*C13&
   C8*C14 C9*C14 C10*C14 C11*C14 C12*C14 C13*C14 C8*c15 C9*C15 C10*C15 C11*C15 C12*c15 C13*c15 C14*C15&
   c8*c16 C9*C16 C10*C16 C11*C16 C12*C16 C13*C16 C14*C16 C15*C16 C8*C17 C9*C17 C10*C17 C11*C17 C12*C17 C13*C17 C14*C17 C15*C17 C16*C17;
      Levels K11 K21 K12 K22 K13 K23 K14 K24 K15 K25 K16 K26 K17 K27 K18 K28 K19 K29 K20 K30;
      inunits 1;
   Exchange 1;
   Sequential;
   XMatrix C8-C17;
   Carry ('StdOrder' 'RunOrder' 'Blocks' 'PtType' ) ('StdOrder' 'RunOrder' 'Blocks' 'PtType' );
  Brief 0.

EndIf

Set 'RunOrder'
  1( 1 : 'runs' / 1 )1
  End.

Sample runs 'RunOrder' 'RunOrder'.

let k5 = 7 + k1
Sort 'StdOrder'-ck5 'StdOrder'-ck5;
  By 'RunOrder'.

ENDMACRO